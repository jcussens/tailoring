Wed 10 Jan 15:46:41 GMT 2024

Idea here is to be modular and focus on readable code. Files are:

simple_opttree.c
code for tree building

workspace.c
provides working space (so as to avoid finding
new space during tree building)

tree.c
code for manipulating nodes/trees

sorted_set.c
code for policytree-style sorted sets

all other files are from other branches

Wed 13 Mar 14:37:07 GMT 2024

have now added reading.c/h and type_all.h

with commit:
cdf2f7030cfc210ae50190bbfc8dbadd5348ee62

get:
(base) uw20605@IT079795:~/repos/tailoring$ time ./a.out untracked/IFLS.txt 2 2
policy_tree object
Tree depth:   2
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "agecat.f2"  split_value: 0
  split_variable: "poorcard_imp"  split_value: 0
    * action: 2
    * action: 1
  * action: 1
Reward: 39.529

real	0m14.995s
user	0m14.986s
sys	0m0.008s

whereas should get a tree of reward of 69 with past_ind_mis at root.
However, depth=1 tree
base) uw20605@IT079795:~/repos/tailoring$ time ./a.out untracked/IFLS.txt 2 1
policy_tree object
Tree depth:   1
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "poorcard_imp"  split_value: 0
  * action: 2
  * action: 1
Reward: 32.0346

real	0m0.169s
user	0m0.153s
sys	0m0.016s
(base) uw20605@IT079795:~/repos/tailoring$ untracked/pt.R untracked/IFLS.txt 2 1
Warning in policy_tree(x, gammas, depth, TRUE) :
  The number of covariates exceeds 50. Consider reducing the dimensionality before running policy_tree, by for example using only the Xj's with the highest variable importance (`grf::variable_importance` - the runtime of exact tree search scales with ncol(X)^depth, see the documentation for details).
policy_tree object 
Tree depth:  1 
Actions:  1: scores.DML 2: scores.DR 
Variable splits: 
(1) split_variable: poorcard_imp  split_value: 0 
  (2) * action: 2 
  (3) * action: 1 

seems correct.

Found bug, not initialising left_perfect and right_perfect - now
getting the right tree!

Wed 13 Mar 17:07:18 GMT 2024

version about to be committed has been tested (and passed) with valgrind

Tue 19 Mar 15:19:30 GMT 2024

currently have two versions: sorted_sets and simple_sets. on binary
data the latter is far faster, on float data initial experiments show
sorted_sets faster. here's results on binary data:

(base) uw20605@IT079795:~/repos/tailoring$ time ./simple_set untracked/IFLS.txt 2 3
policy_tree object
Tree depth:   3
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "past_ind_mis"  split_value: 0
  split_variable: "agecat.f3"  split_value: 0
    split_variable: "province.f18"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "province.f32"  split_value: 0
      * action: 2
      * action: 1
  split_variable: "region.f3-Jawa"  split_value: 0
    split_variable: "poorcard_imp"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "past_mis"  split_value: 0
      * action: 1
      * action: 2
Reward: 117.766

real	0m17.022s
user	0m17.000s
sys	0m0.016s
(base) uw20605@IT079795:~/repos/tailoring$ time ./sorted_set untracked/IFLS.txt 2 3
policy_tree object
Tree depth:   3
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "past_ind_mis"  split_value: 0
  split_variable: "agecat.f3"  split_value: 0
    split_variable: "province.f18"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "province.f32"  split_value: 0
      * action: 2
      * action: 1
  split_variable: "region.f3-Jawa"  split_value: 0
    split_variable: "poorcard_imp"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "past_mis"  split_value: 0
      * action: 1
      * action: 2
Reward: 117.766

real	8m8.125s
user	8m8.091s
sys	0m0.012s

Wed 20 Mar 14:52:13 GMT 2024

For R package, looking at policytree.
There is a file tree_search.h which has a prototype for a function
tree_search.
The file Rcppbindings.cpp defines a function tree_search_rcpp which
calls tree_search.
The R file policy_tree.R defines a function policy_tree which calls
tree_search_rcpp

tree_search.h is a "normal" C++ header file
Rcppbindings.cpp is a C++ file that references Rcpp types. This is the
equivalent of rcpp_hello_world.cpp in the skeleton.
So need to write our own C/C++ file to translate NODE* type into an R list.

Wed 20 Mar 19:53:37 GMT 2024

policytree approach
put root into queue
pop queue (now empty) and record stuff
push root->left_child
push root->right_child
pop root->left_child and record stuff
push root->left_child->left_child
push root->left_child->right_child
pop root->right_child

so process breadth-first, left to right.

Thu 21 Mar 17:57:51 GMT 2024

To make R package
1. Ensure in correct directory
2. Start R
3. Do "library(Rcpp)"
4. Do "compileAttributes()" - this will generate wrapper code
5. Also, if needed, do library(roxygen2); roxygenise()" to update .Rd
files
6. Leave R
7. Do "R CMD build fastpolicytree"
8. Do "R CMD check fastpolicytree_1.0.tar.gz"
9. Do "sudo R CMD INSTALL fastpolicytree_1.0.tar.gz"

Fri 22 Mar 09:06:40 GMT 2024

to debug R which calls C/C++ code do: "R -d gdb"
CTRL-C to get gdb prompt
"continue" to get back to R process	

Tue 16 Apr 14:01:52 BST 2024

Managed a depth 4 tree on IFLS.txt

(base) uw20605@IT079795:~/repos/tailoring$ time ./simple_set untracked/IFLS.txt 2 4
policy_tree object
Tree depth:   4
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "past_ind_mis"  split_value: 0
  split_variable: "sex"  split_value: 0
    split_variable: "region.f3-Jawa"  split_value: 0
      split_variable: "province.f18"  split_value: 0
        * action: 2
        * action: 1
      split_variable: "quintile.f4"  split_value: 0
        * action: 2
        * action: 1
    split_variable: "province.f32"  split_value: 0
      split_variable: "byear.f2013"  split_value: 0
        * action: 2
        * action: 1
      split_variable: "agecat.f3"  split_value: 0
        * action: 2
        * action: 1
  split_variable: "raskin_imp"  split_value: 0
    split_variable: "region.f3-Jawa"  split_value: 0
      split_variable: "byear.f2006"  split_value: 0
        * action: 2
        * action: 1
      split_variable: "province.f33"  split_value: 0
        * action: 1
        * action: 2
    split_variable: "region.f4-Bali.NTB.NTT"  split_value: 0
      split_variable: "province.f33"  split_value: 0
        * action: 2
        * action: 1
      split_variable: "poorcard_imp"  split_value: 0
        * action: 2
        * action: 1
Reward: 159.406
Git commit is 7f1a2ba.

Wed 17 Apr 12:07:17 BST 2024

commit b49229b and the 2 commits preceding all have basically the same
time (37 seconds) on IFLS.txt depth=3 trees.

Fri 26 Apr 07:49:24 BST 2024

putting everything together on together branch
Could make UNITS and CONST_UNITS a typedef for void*

Each prototype in units.h takes an extra 'params' argument.
Then a new file units.c uses this to choose which actual function to call

Fri 26 Apr 20:37:18 BST 2024

what we need from a macro
given the string representing the function prototype
1) repeat that prototype, but add in '   const STRATEGY*       strategy,           /**< tree-building strategy */'

2) add line  "if( units_type(strategy) == SORTED_SET_TYPE )"
3) add "return <rettype> sorted_set_<fnname>(<arg_names>)
4) add 'else'
5) add "return <rettype> simple_set_<fnname>(<arg_names>)

problem is: need to cast any arg declared as of type UNITS

Mon 29 Apr 07:09:48 BST 2024

with current uncommitted code get the wrong tree with IFLS depth=1 if
finding reward is turned off.

Fri  3 May 09:49:18 BST 2024

good results with caching, created depth 4 tree for IFLS in 7m26s

Mon  6 May 08:29:20 BST 2024

Current approch with level one learning

1) Find no split reward for each action
2) For each variable, for each split
   find those moved from right to left
   update left rewards (one for each action) by adding
   find best left reward
   find right reward for each action by subtracting and find best one

If right_units are ordered then easy to return pointer to moved
elements, if not ordered then more expensive, but we only want left
rewards, so perhaps don't compute elts and nelts

Thu  9 May 10:47:59 BST 2024

With commit 200200a now getting:

(base) uw20605@IT079795:~/repos/tailoring$ time ./fpt untracked/IFLS.txt 2 3
policy_tree object
Tree depth:   3
Actions:  1: "scores.DML" 2: "scores.DR"
Variable splits:
split_variable: "past_ind_mis"  split_value: 0
  split_variable: "agecat.f3"  split_value: 0
    split_variable: "province.f18"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "province.f32"  split_value: 0
      * action: 2
      * action: 1
  split_variable: "region.f3-Jawa"  split_value: 0
    split_variable: "poorcard_imp"  split_value: 0
      * action: 2
      * action: 1
    split_variable: "past_mis"  split_value: 0
      * action: 1
      * action: 2
Reward: 117.766
Git commit is 200200a.

real	0m2.633s
user	0m2.612s
sys	0m0.017s

Not sure why it seemed to be slower before!
And now get depth 4 tree in 56 seconds.

Here's the perf report from the depth 4 tree:

  79.34%  fpt      fpt                [.] simple_set_update_left_rewards_from_full
   6.40%  fpt      fpt                [.] search_cache
   5.23%  fpt      fpt                [.] simple_set_next_split
   3.99%  fpt      fpt                [.] find_best_split
   1.75%  fpt      fpt                [.] simple_set_find_nosplit_rewards
   1.10%  fpt      fpt                [.] simple_set_get_reward_ub
   0.55%  fpt      fpt                [.] add_to_cache
   0.45%  fpt      libc.so.6          [.] __memset_avx2_unaligned_erms
   0.10%  fpt      fpt                [.] next_shallow_split
   0.09%  fpt      libc.so.6          [.] _int_malloc
   0.07%  fpt      fpt                [.] simple_set_next_shallow_split

So would make sense to improve cache handling.

Sat 11 May 10:56:52 BST 2024

Have:

Need to supply at least a filename and the number of actions.
Usage: fpt FILENAME NUM_OF_ACTIONS [DEPTH] [DATA_REP] [COMPUTE_UBS] [COMPUTE_DUMMY] [USE_LAST_REWARDS] [USE_CUTOFFS] [USE_CACHE] [EXPLOIT_BINARY]
Default value of DEPTH is 3, for DATA_REP, 0 means delayed sorting, 1 means policytree style, any other value (the default) means use data to decide.
All other optional arguments are 0 (off) or 1 (on), with 1 being the default.

and:

(base) uw20605@IT079795:~/repos/tailoring$ time ./fpt untracked/fakedata.txt 2 2 1 0 0 1 0 0 0
policy_tree object
Tree depth:   2
Actions:  1: "control" 2: "treated"
Variable splits:
split_variable: "X1"  split_value: 0.06
  split_variable: "X2"  split_value: 1.02
    * action: 2
    * action: 1
  split_variable: "X2"  split_value: -1.26
    * action: 2
    * action: 1
Reward: 356.805
Git commit is 054de04.

real	0m2.980s
user	0m2.977s
sys	0m0.004s

Other combinations (eg having all 6 optional flags set to 1) take
about 8-9 seconds, so looks like just using last-rewards is what matters.

Mon 13 May 20:36:44 BST 2024

Have a bug where we are not getting an optimal tree, but one just less
than optimal:

(base) uw20605@IT079795:~/repos/tailoring$ Rscript R/test_getstats.R 4 100 20 2 5
policytree
policy_tree object 
Tree depth:  5 
Actions:  1: control 2: treated 
Variable splits: 
(1) split_variable: X3  split_value: 1 
  (2) split_variable: X1  split_value: 1 
    (4) split_variable: X2  split_value: 1 
      (8) split_variable: X6  split_value: 1 
        (16) * action: 2 
        (17) split_variable: X5  split_value: 1 
          (24) * action: 2 
          (25) * action: 1 
      (9) * action: 2 
    (5) split_variable: X5  split_value: 1 
      (10) split_variable: X4  split_value: 1 
        (18) split_variable: X9  split_value: 1 
          (26) * action: 1 
          (27) * action: 2 
        (19) * action: 2 
      (11) * action: 2 
  (3) split_variable: X8  split_value: 1 
    (6) split_variable: X1  split_value: 1 
      (12) split_variable: X16  split_value: 1 
        (20) * action: 2 
        (21) split_variable: X5  split_value: 1 
          (28) * action: 1 
          (29) * action: 2 
      (13) * action: 2 
    (7) split_variable: X14  split_value: 1 
      (14) split_variable: X11  split_value: 1 
        (22) * action: 2 
        (23) split_variable: X10  split_value: 1 
          (30) * action: 2 
          (31) * action: 1 
      (15) * action: 2 
[1] 346.6806
fastpolicytree
policy_tree object 
Tree depth:  5 
Actions:  1: control 2: treated 
Variable splits: 
(1) split_variable: X1  split_value: 1 
  (2) split_variable: X2  split_value: 1 
    (4) split_variable: X3  split_value: 1 
      (8) split_variable: X4  split_value: 1 
        (12) split_variable: X6  split_value: 1 
          (18) * action: 2 
          (19) * action: 1 
        (13) split_variable: X12  split_value: 1 
          (20) * action: 1 
          (21) * action: 2 
      (9) split_variable: X6  split_value: 1 
        (14) * action: 2 
        (15) split_variable: X8  split_value: 1 
          (22) * action: 1 
          (23) * action: 2 
    (5) * action: 2 
  (3) split_variable: X2  split_value: 1 
    (6) split_variable: X3  split_value: 1 
      (10) split_variable: X4  split_value: 1 
        (16) split_variable: X9  split_value: 1 
          (24) * action: 1 
          (25) * action: 2 
        (17) * action: 2 
      (11) * action: 2 
    (7) * action: 2 
[1] 346.1949

But when we do:
(base) uw20605@IT079795:~/repos/tailoring$ ./fpt tmpdat.txt 2 5
policy_tree object
Tree depth:   5
Actions:  1: "control" 2: "treated"
Variable splits:
split_variable: "1"  split_value: 1
  split_variable: "2"  split_value: 1
    split_variable: "3"  split_value: 1
      split_variable: "5"  split_value: 1
        * action: 2
        split_variable: "6"  split_value: 1
          * action: 2
          * action: 1
      split_variable: "5"  split_value: 1
        split_variable: "12"  split_value: 1
          * action: 2
          * action: 1
        * action: 2
    * action: 2
  split_variable: "3"  split_value: 1
    split_variable: "4"  split_value: 1
      split_variable: "19"  split_value: 1
        * action: 1
        * action: 2
      * action: 2
    * action: 2
Reward: 346.681
Git commit is ccaac04.

which is correct. Perhaps the combination of flags in R version is
causing a problem.

Wed 15 May 16:18:41 BST 2024

sudo perf record ./fpt untracked/fakedata.txt 2 --depth 2

  36.26%  fpt      fpt                   [.] find_best_split
  24.99%  fpt      libc.so.6             [.] __memmove_avx_unaligned_erms
  20.59%  fpt      fpt                   [.] sorted_set_next_shallow_split
   4.47%  fpt      fpt                   [.] sorted_set_next_split
   3.56%  fpt      fpt                   [.] sorted_set_find_nosplit_rewards
   3.06%  fpt      fpt                   [.] next_shallow_split
   1.81%  fpt      fpt                   [.] sorted_set_get_reward_ub
   1.22%  fpt      fpt                   [.] search_cache
   0.76%  fpt      fpt                   [.] using_sorted_sets
   0.73%  fpt      fpt                   [.] add_to_cache
   0.65%  fpt      fpt                   [.] exploit_binaryvars

sudo perf record ./fpt untracked/fakedata.txt 2 --depth 2 --use_cutoffs 0

  30.30%  fpt      libc.so.6          [.] __memmove_avx_unaligned_erms
  27.16%  fpt      fpt                [.] find_best_split
  16.55%  fpt      fpt                [.] sorted_set_next_shallow_split
  11.87%  fpt      fpt                [.] sorted_set_next_split
   2.61%  fpt      fpt                [.] sorted_set_find_nosplit_rewards
   2.61%  fpt      fpt                [.] next_shallow_split
   1.29%  fpt      fpt                [.] sorted_set_get_reward_ub
   1.11%  fpt      fpt                [.] add_to_cache
   0.88%  fpt      fpt                [.] search_cache
   0.82%  fpt      libc.so.6          [.] __vfscanf_internal
   0.67%  fpt      fpt                [.] exploit_binaryvars
   0.60%  fpt      fpt                [.] simple_set_make_units
   0.58%  fpt      fpt                [.] using_sorted_sets
   0.56%  fpt      fpt                [.] sorted_set_make_units
   0.54%  fpt      libc.so.6          [.] __GI_____strtod_l_internal

Tue 15 Oct 10:14:55 BST 2024

versiongit.h - an untracked file - is updated locally when a new
commit is made. Neither it nor any symbolic links to it can be in the
github repo. It should only be used when making a new version of the R
package, which is done locally.

Tue 15 Oct 10:34:13 BST 2024

compilation throws no errors when compiling using:

devtools::install_github("jcussens/tailoring/fastpolicytree")

but no man pages found and also get:
Error in tree_search_rcpp(as.matrix(X), as.matrix(Gamma), depth, min.node.size,  : 
  could not find function "tree_search_rcpp"

so perhaps wrapper code is missing, ie stuff produced by
compileAttributes()
Yes, R/RcppExports.R and src/RcppExports.cpp are not in repo
