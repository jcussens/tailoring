// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tree_search_rcpp
Rcpp::List tree_search_rcpp(const Rcpp::NumericMatrix& X, const Rcpp::NumericMatrix& Y, int depth, int min_node_size, int datatype, int find_reward_ub, int find_dummy_split_reward, int use_last_rewards, int use_cutoffs, int use_cache, int exploit_binaryvars);
RcppExport SEXP _fastpolicytree_tree_search_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP depthSEXP, SEXP min_node_sizeSEXP, SEXP datatypeSEXP, SEXP find_reward_ubSEXP, SEXP find_dummy_split_rewardSEXP, SEXP use_last_rewardsSEXP, SEXP use_cutoffsSEXP, SEXP use_cacheSEXP, SEXP exploit_binaryvarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_node_size(min_node_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< int >::type find_reward_ub(find_reward_ubSEXP);
    Rcpp::traits::input_parameter< int >::type find_dummy_split_reward(find_dummy_split_rewardSEXP);
    Rcpp::traits::input_parameter< int >::type use_last_rewards(use_last_rewardsSEXP);
    Rcpp::traits::input_parameter< int >::type use_cutoffs(use_cutoffsSEXP);
    Rcpp::traits::input_parameter< int >::type use_cache(use_cacheSEXP);
    Rcpp::traits::input_parameter< int >::type exploit_binaryvars(exploit_binaryvarsSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_search_rcpp(X, Y, depth, min_node_size, datatype, find_reward_ub, find_dummy_split_reward, use_last_rewards, use_cutoffs, use_cache, exploit_binaryvars));
    return rcpp_result_gen;
END_RCPP
}
// githash_rcpp
Rcpp::CharacterVector githash_rcpp();
RcppExport SEXP _fastpolicytree_githash_rcpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(githash_rcpp());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastpolicytree_tree_search_rcpp", (DL_FUNC) &_fastpolicytree_tree_search_rcpp, 11},
    {"_fastpolicytree_githash_rcpp", (DL_FUNC) &_fastpolicytree_githash_rcpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastpolicytree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
